{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["styles","App","props","onImportExcel","file","console","log","files","target","fileReader","FileReader","onload","event","result","workbook","XLSX","type","data","sheet","Sheets","hasOwnProperty","message","success","excelRowsObjArr","sheet_to_row_object_array","vans","i","length","String","v","includes","push","out","forEach","van","totalVan","total","Math","round","setState","e","error","readAsBinaryString","state","justify","align","gutter","className","accept","onChange","this","span","grid","xs","sm","md","lg","xl","xxl","dataSource","renderItem","item","Item","title","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b49982a6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport 'antd/dist/antd.css';\nimport { Button,  message,List,Card ,Row, Col} from 'antd';\n \nimport * as XLSX from 'xlsx';\nlet styles = {\n    'file-uploader':'height:30px',\n    'upload-text':'height:30px',\n    'upload-tip':'display:block'\n}\nexport default class App extends Component {\n \n  constructor(props){\nsuper(props);\nthis.state = []\n  }\n    onImportExcel = file => {\n      console.log(file)\n        const { files } = file.target;\n \n        // Read the file through the FileReader object\n \n        const fileReader = new FileReader();\n \n        fileReader.onload = event => {\n \n            try {\n \n                const { result } = event.target;\n \n                                 // Read the entire excel table object in binary stream\n \n                const workbook = XLSX.read(result, { type: 'binary' });\n \n                                 // Store the obtained data\n \n                let data = [];\n \n                                 // traverse each worksheet to read (here by default only the first sheet is read)\n \n                for (const sheet in workbook.Sheets) {\n \n                    // esline-disable-next-line\n \n                    if (workbook.Sheets.hasOwnProperty(sheet)) {\n \n                                                 // Use sheet_to_json method to convert excel to json data\n                        //console.log(workbook.Sheets[sheet]);\n                        data = workbook.Sheets[sheet]\n                        \n                        //data = data.concat(XLSX.utils.sheet_to_json(workbook.Sheets[sheet]));\n\n \n                                                 // break; // If only the first table is taken, uncomment this line\n \n                    }\n \n                }\n \n                                 // Finally obtained and formatted json data\n \n                                 message.success('Successful upload!')\n                let excelRowsObjArr = XLSX.utils.sheet_to_row_object_array(data)\n                \n                let vans = []\n                for (let i = 13;i<excelRowsObjArr.length;i++){\n                  if (!String((data[`A${i}`]?.v)).includes(\"Total\")){\n                    if (!vans.includes(String((data[`A${i}`]?.v)))){\n                      vans.push(String((data[`A${i}`]?.v)));\n                    }\n                  }\n                 \n                }\n                var out = []\n                vans.forEach(van=>{\n                  let totalVan = 0.0\n                  for (let i = 13;i<excelRowsObjArr.length;i++){\n                    if (String((data[`A${i}`]?.v)) === van){\n                      if((data[`K${i}`]?.v) !== 0.0){\n                        totalVan += (data[`R${i}`]?.v)\n                      }\n                    }\n                    \n                  }\n                  out.push({van:van,total:Math.round(totalVan)})\n                  \n                });\n                console.log(out)\n                this.setState({out:out})\n                /*console.log(data);\n                data.forEach(element => {\n                  console.log(element[0])\n                });*/\n \n            } catch (e) {\n \n                                 // Relevant prompts for incorrect file type errors can be thrown here\n                console.log(e, 'eeee')\n \n                                 message.error('The file type is incorrect!');\n \n            }\n \n        };\n \n                 // Open the file in binary mode\n \n        fileReader.readAsBinaryString(files[0]);\n \n    }\n    render() {\n     \n    \n        return (\n \n            <div>\n  \n <Row justify=\"space-around\" align=\"middle\" gutter={[32, 32]}>\n   <Col >\n                <Button >\n \n                    \n \n                    <input className={styles['file-uploader']} type='file' accept='.xlsx' onChange={this.onImportExcel} />\n \n                                         <span className={styles['upload-text']}>Upload files</span>\n \n                </Button>\n                <p className={styles['upload-tip']}>Support que le format .xlsx </p>\n                </Col>\n                </Row>\n                <Row justify=\"space-around\" align=\"middle\">\n                <Col span={24}>\n                 \n \n                                 \n                                 <List\n    grid={{\n      gutter: 16,\n      xs: 1,\n      sm: 2,\n      md: 4,\n      lg: 4,\n      xl: 6,\n      xxl: 3,\n    }}\n    dataSource={this.state.out}\n    renderItem={item => (\n      <List.Item>\n        <Card title={item.van}>{item.total} DA</Card>\n      </List.Item>\n      \n    )}\n    />\n     </Col>\n                </Row>\n \n            </div >\n \n        );\n \n    }\n \n}\n \n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}